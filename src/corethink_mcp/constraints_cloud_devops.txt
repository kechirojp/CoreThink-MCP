# CoreThink-MCP クラウド・DevOps分野制約ルール
# クラウドインフラ・DevOps・SRE運用における安全性・信頼性制約

## インフラストラクチャ・アズ・コード（IaC）制約
MUST: インフラ変更をコード化・バージョン管理する
NEVER: 手動・アドホックなインフラ変更を本番環境で実行しない
MUST: IaCテンプレートの構文・論理検証を実行する
MUST: インフラ変更の影響範囲を事前に分析する
SHOULD: ドリフト検出・修正機能を定期実行する
MUST: インフラ状態の冪等性を保証する
MUST: 機密情報・シークレットの適切な管理を実施する

## コンテナ・オーケストレーション制約
MUST: コンテナイメージの脆弱性スキャンを必須実行する
NEVER: root権限でのコンテナ実行を本番環境で許可しない
MUST: リソース制限（CPU、メモリ）を適切に設定する
MUST: ネットワークポリシー・セキュリティコンテキストを適用する
SHOULD: イメージの最小化・マルチステージビルドを採用する
MUST: ログ・メトリクス収集の設定を確実に実装する
MUST: ヘルスチェック・リーダイネスプローブを適切に設定する

## CI/CDパイプライン制約
MUST: 本番デプロイ前の自動テスト・品質ゲートを必須実行する
NEVER: テスト未実行・品質チェック未通過のコードを本番配布しない
MUST: デプロイパイプラインの各段階で承認プロセスを実装する
MUST: ロールバック手順の自動化・検証を確実に実施する
SHOULD: ブルーグリーン・カナリア配備による安全な配布を実施する
MUST: デプロイ履歴・変更管理の完全な追跡を確保する
MUST: シークレット・認証情報の安全な管理を実施する

## 監視・オブザーバビリティ制約
MUST: SLI/SLO/SLAの明確な定義・監視を実施する
MUST: 重要メトリクスのアラート・エスカレーション機能を設定する
NEVER: 監視・ログ機能の無効化・省略を本番環境で実行しない
MUST: 分散トレーシング・APMツールの適切な活用を実施する
SHOULD: 異常検出・予兆監視機能の導入を検討する
MUST: ログの集約・分析・長期保存を適切に実施する
MUST: セキュリティ監視・侵入検知システムを実装する

## セキュリティ・コンプライアンス制約
MUST: ゼロトラスト・最小権限の原則を徹底適用する
NEVER: 平文パスワード・APIキーの使用・保存を行わない
MUST: 定期的な脆弱性スキャン・ペネトレーションテストを実施する
MUST: データ暗号化（転送時・保存時）を確実に実装する
SHOULD: WAF・DDoS保護・脅威検知システムを適用する
MUST: コンプライアンス要件（SOC2、ISO27001等）への適合を確認する
MUST: インシデント対応・フォレンジック機能を確保する

## 災害復旧・事業継続制約
MUST: RTO/RPO要件を満たす災害復旧計画を策定・検証する
NEVER: 単一障害点（SPOF）を許容するアーキテクチャを採用しない
MUST: 定期的な災害復旧訓練・バックアップ復元テストを実施する
MUST: 地理的冗長性・マルチリージョン配置を検討する
SHOULD: カオスエンジニアリング・障害注入テストを実施する
MUST: データバックアップの完全性・復元可能性を定期検証する
MUST: 事業継続計画（BCP）との整合性を確保する

## コスト最適化・リソース管理制約
MUST: リソース使用量・コストの継続的監視・最適化を実施する
SHOULD: 自動スケーリング・スケジューリング機能を適切に活用する
MUST: 未使用・過剰リソースの定期的な特定・削減を実施する
MUST: コスト配賦・チャージバック機能を適切に実装する
SHOULD: リザーブドインスタンス・スポットインスタンスの活用を検討する
MUST: クラウドコスト管理ツールの効果的な活用を実施する

## パフォーマンス・スケーラビリティ制約
MUST: 負荷テスト・ストレステストによる性能検証を実施する
MUST: スケーラビリティ要件への適合性を事前に確認する
NEVER: パフォーマンス劣化を引き起こす変更を無検証で適用しない
MUST: キャッシュ戦略・CDN活用による最適化を検討する
SHOULD: マイクロサービス・分散アーキテクチャの適切な設計を実施する
MUST: データベース性能・クエリ最適化を継続的に実施する

## 変更管理・リリース制約
MUST: 変更諮問委員会（CAB）による重要変更の事前承認を確保する
MUST: 変更の影響分析・リスク評価を包括的に実施する
NEVER: 緊急時以外での承認なし変更を実行しない
MUST: 変更履歴・構成管理データベース（CMDB）の正確性を維持する
SHOULD: 自動化されたロールバック・復旧手順を準備する
MUST: 変更後の検証・動作確認を必須実施する

## チーム協働・文化制約
MUST: Dev・Ops・Secチーム間の効果的なコラボレーションを促進する
SHOULD: ポストモーテム・学習文化による継続的改善を実施する
MUST: 知識共有・ドキュメント化の促進を積極的に実施する
MUST: オンコール・エスカレーション体制の明確な定義を確保する
SHOULD: SREプラクティス・信頼性エンジニアリングの導入を検討する
MUST: チーム間の責任・権限分担を明確に定義する

## 自動化・効率化制約
MUST: 繰り返し作業の自動化・標準化を積極的に推進する
SHOULD: ChatOps・Infrastructure as Codeの効果的な活用を実施する
MUST: 自動化スクリプト・ツールの品質・セキュリティを確保する
MUST: 自動化失敗時の手動フォールバック手順を準備する
SHOULD: AIOpS・機械学習による運用最適化を検討する
MUST: 自動化プロセスの監視・エラーハンドリングを適切に実装する

## マルチクラウド・ハイブリッド制約
MUST: ベンダーロックイン回避のための標準化・抽象化を実施する
SHOULD: クラウド間のデータ転送・ネットワーク最適化を検討する
MUST: 各クラウドプロバイダーの特性・制限を適切に考慮する
MUST: 統一的なガバナンス・ポリシー管理を実現する
SHOULD: ワークロード配置・データ主権要件への適合を確認する
MUST: クラウド間の整合性・同期機能を適切に実装する

## 新技術導入・実験制約
MUST: 新技術・ツール導入時のPoC・評価を段階的に実施する
SHOULD: エメージング技術・ベストプラクティスの継続的学習を促進する
MUST: 技術選定時の客観的評価基準・比較分析を実施する
MUST: 新技術導入時のリスク・影響評価を包括的に実施する
SHOULD: イノベーション・実験文化の促進と安全性確保の両立を図る
MUST: 技術負債・レガシーシステムの計画的刷新を検討する

## コミュニティ・エコシステム制約
SHOULD: オープンソース・コミュニティへの貢献・参加を積極的に実施する
MUST: サードパーティツール・ライブラリのライセンス・セキュリティを確認する
SHOULD: 業界標準・ベストプラクティスの継続的な採用を実施する
MUST: ベンダー・パートナーとの健全な関係性を維持する
SHOULD: ナレッジシェア・業界コミュニティでの情報交換を促進する
