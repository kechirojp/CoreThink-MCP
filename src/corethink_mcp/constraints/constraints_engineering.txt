# CoreThink-MCP エンジニアリング分野制約ルール
# ソフトウェア・ハードウェア・システム開発における安全性・品質保証制約

## ソフトウェア開発制約
MUST: コードの論理的整合性を段階的に検証する
MUST: エラーハンドリングの完全性を確認する
NEVER: 未テストコードを本番環境に適用しない
MUST: セキュリティ脆弱性の可能性を評価する
NEVER: 性能劣化を引き起こす可能性のある変更を無検証で適用しない
MUST: 依存関係の影響範囲を明示的に分析する

## システムアーキテクチャ制約
MUST: スケーラビリティへの影響を事前評価する
MUST: 単一障害点（SPOF）の有無を確認する
NEVER: データ整合性を損なう可能性のあるアーキテクチャ変更を行わない
MUST: 可用性要件への適合性を検証する
SHOULD: 障害復旧手順の実現可能性を確認する
MUST: セキュリティ境界の明確性を維持する

## データベース・データ管理制約
MUST: データの完全性制約を明示的に定義する
NEVER: データ損失リスクのある操作を事前検証なしに実行しない
MUST: バックアップ・復旧手順の実行可能性を確認する
MUST: 個人情報・機密データの取り扱い規則を遵守する
SHOULD: データマイグレーションの可逆性を確保する
MUST: 同時実行制御の適切性を評価する

## セキュリティ制約
MUST: 認証・認可機能の適切性を段階的に検証する
NEVER: 既知の脆弱性パターンを含む実装を採用しない
MUST: 入力検証の完全性を確認する
MUST: 暗号化要件への適合性を検証する
NEVER: 権限昇格の可能性を含む設計を採用しない
MUST: ログ・監査証跡の適切性を確保する

## パフォーマンス制約
MUST: レスポンス時間への影響を定量的に評価する
MUST: リソース使用量の制限内収束を確認する
NEVER: メモリリーク・リソースリークを引き起こす実装を採用しない
SHOULD: 負荷特性の変化を事前に予測する
MUST: ボトルネック発生の可能性を評価する

## テスト・検証制約
MUST: テストカバレッジの適切性を確認する
MUST: 境界値・異常値でのテストを必須とする
NEVER: 単体テスト・結合テストを省略しない
MUST: 本番環境に近い条件でのテストを実行する
SHOULD: パフォーマンステストの実施を検討する
MUST: 回帰テストの実行可能性を確保する

## 運用・保守制約
MUST: 運用手順の実行可能性を事前に確認する
MUST: 監視・アラート機能の適切性を検証する
NEVER: 運用負荷を大幅に増加させる変更を無計画で実行しない
MUST: 障害対応手順の明確性を確保する
SHOULD: 保守性・可読性への影響を評価する
MUST: ドキュメントの整合性を維持する

## 変更管理制約
MUST: 変更の影響範囲を包括的に分析する
MUST: ロールバック手順の実行可能性を確認する
NEVER: 複数の重要変更を同時に実施しない
MUST: 変更前後の状態を明確に記録する
SHOULD: 段階的デプロイメントの実施を検討する
MUST: 関係者への事前通知・合意を確保する

## 品質保証制約
MUST: コード品質メトリクスの基準適合性を確認する
MUST: 設計原則（SOLID、DRY等）への準拠を検証する
NEVER: 技術的負債を意図的に増加させない
MUST: レビュープロセスの適切性を確保する
SHOULD: 静的解析ツールの活用を検討する
MUST: 品質ゲートの通過を確認する

## 法的・コンプライアンス制約
MUST: ライセンス要件への適合性を確認する
MUST: データ保護規則（GDPR等）への準拠を検証する
NEVER: 知的財産権を侵害する可能性のある実装を採用しない
MUST: 業界標準・規制要件への適合性を確認する
SHOULD: セキュリティ監査要件への対応を検討する
MUST: 契約上の義務・制限への適合性を確保する

## エマージェンシー対応制約
MUST: 緊急時対応手順の実行可能性を確認する
MUST: 障害影響の最小化手順を事前に定義する
NEVER: 緊急時に検証不十分な変更を適用しない
MUST: エスカレーション手順の明確性を確保する
SHOULD: 災害復旧計画との整合性を確認する
MUST: 24/7対応体制への影響を評価する

## KEYWORDS
# エンジニアリング分野検出用キーワード（自動分野判定に使用）
設計, 実装, アーキテクチャ, システム, ソフトウェア, ハードウェア, プログラム, コード, 開発, テスト, デバッグ, パフォーマンス, セキュリティ, ネットワーク, データベース, API, フレームワーク
